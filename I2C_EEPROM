#define F_CPU 8000000
#include <avr/io.h>
#include <util/delay.h>

void USART_Init(void)
{
        /* Setting up USART */
	UBRR0H = 0x00;
	UBRR0L = 0x33;
	UCSR0C = 0x06;
	UCSR0B = 0x18;
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) )
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}

void I2C_Init(void)
{
        /* Setting up I2C with rate 100,000 hz */
	TWBR=0x20;
	TWSR=0x00;
}

void I2C_Start(void)
{
	TWCR=0b10100100;
	while(!(TWCR & (1<<TWINT)));   // waiting for start to be sent 
	while((TWSR & 0xF8)!= 0x08);   // checking if start has been sent succesfully
}

void I2C_Repeated_Start(void)
{
	TWCR=0b10100100;
	while(!(TWCR & (1<<TWINT)));
	while((TWSR & 0xF8)!= 0x10);
}

void EEPROM_WR(void)
{
	TWDR=0b10100000;                // loading data register with SLA+W
	TWCR=(1<<TWINT)|(1<<TWEN);      // clearing twint flag
	while (!(TWCR & (1<<TWINT)));   // waiting for data to be sent
	while( (TWSR & 0xF8) != 0x18);  // checking if data has been sent and ack has been recieved
}

void Address(uint8_t addrs)
{
	TWDR=addrs;
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x28);
}

void EEPROM_Write(unsigned char data)
{
	TWDR=data;
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x28);
}

unsigned char EEPROM_Current_Read(void)
{
	TWDR=0b10100001;                // Loading register with SLA+R
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x40);
	
	TWCR = (1<<TWINT)|(1<<TWEN);    // TWEA not set as we have to send nack
	while (!(TWCR & (1<<TWINT)));
	while(((TWSR & 0xF8)!=0x58));
	
	return(TWDR);
}

unsigned char EEPROM_Random_Read(void)
{
	TWCR=0b10100100;                // sending a repeated start
	while(!(TWCR & (1<<TWINT)));
	while((TWSR & 0xF8)!= 0x10);
	
	TWDR=0b10100001;                // sending SLA+R
	TWCR=(1<<TWINT)|(1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	while( (TWSR & 0xF8) != 0x40);
	
	TWCR = (1<<TWINT)|(1<<TWEN);     // TWEA not set as we have to send nack
	while (!(TWCR & (1<<TWINT)));
	while(((TWSR & 0xF8)!=0x58));
	
	return(TWDR);
}

void I2C_Stop(void)
{
	TWCR=0b10010100;
}
int main(void)
{	
   I2C_Init();
   USART_Init();
   
   I2C_Start();
   EEPROM_WR();
   Address(0x00);
   Address(0x00);                          // 17 bit address sent, this is starting address
   int i=0;
  while(i<5)
  {
	  EEPROM_Write(USART_Receive());   // This will write whatever we send it
	  i++;
  } 
   I2C_Stop();
     _delay_ms(100);                       // Time given for EEPROM to finish it's write cycle
 
   uint8_t add=0x00;
   
   /*This increments the address and then uses a random read to read the data*/
   
   while(i>0)
   {
	   I2C_Start();
	   EEPROM_WR();
	   Address(0x00);
	   Address(add);
       USART_Transmit(EEPROM_Random_Read());
	    I2C_Stop();
		_delay_ms(100);
	   i--;
	   add+=0x01;
   }
   
}
